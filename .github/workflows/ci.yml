name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with ruff
        run: |
          ruff check .

      - name: Check formatting with black
        run: |
          black --check .

      - name: Type check with mypy
        run: |
          mypy app.py order_processing_stack.py

      - name: Security scan with bandit
        run: |
          bandit -r lambdas/ -ll

      - name: Security check with safety
        run: |
          safety check --bare || true

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.13'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  cdk-diff:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Required to checkout code

    env:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      HAS_AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID != '' && 'true' || 'false' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials (OIDC)
        if: ${{ env.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Configure AWS credentials (Access Keys - Fallback)
        if: ${{ env.AWS_ROLE_ARN == '' && env.HAS_AWS_ACCESS_KEY == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: CDK Diff
        if: ${{ env.AWS_ROLE_ARN != '' || env.HAS_AWS_ACCESS_KEY == 'true' }}
        run: cdk diff
        continue-on-error: true

      - name: CDK Synth (no AWS credentials)
        if: ${{ env.AWS_ROLE_ARN == '' && env.HAS_AWS_ACCESS_KEY == 'false' }}
        run: cdk synth
